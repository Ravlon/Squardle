""" Module get the board configuration from the squaredle app api.
Other information you can access are the current and previous date, the current and previous puzzle configuration, solution to the previous puzzle, and stats of played puzzles.
    """
import json
import requests
from Luca.logger import LucaLogger
logger = LucaLogger(__name__)

PUZZLE = "gPuzzleConfig"
TODAY = "gTodayDateStr"
YESTERDAY = "gYesterdayDateStr"
PREVIOUS_DAY_WORDS = "gYesterdayWords"

def string_clean(sequence):
    """clean text to ensure json compatibility"""

    for i,j in enumerate(sequence):
        sequence[i] = j.replace("\n","").replace("\\n","").replace("\\/","/").replace("\\\"","\'").strip()

    return sequence

def js_parser():
    """retrieve all info necessary for squardle"""
    #use link to get text
    url = "https://squaredle.app/api/today-puzzle-config.js"
    try:
        data = requests.get(url, timeout=30).text
    except:
        logger.critical("Request Get URL unsuccessful.",exc_info=True)
        return 0
    
    
    #data format
    data = str(data).split(";")
    data = string_clean(data)
    data_dict = dict()

    #create dictionary of the constant values generated by javascript
    for const in data:
        constant = const.split("=")
        try:
            key = constant[0].split(" ")[1]
            value = "".join(constant[1:])
            data_dict[key] = value.strip()
        except:
            pass
    message = "Dictionary has {0} constants: {1}.".format(len(data_dict)," ".join(list(data_dict.keys())))
    logger.info(message)
    
    #retrieve json file of previous day solutions
    data_dict[PREVIOUS_DAY_WORDS] = json.loads(data_dict[PREVIOUS_DAY_WORDS])

    #clean data of todays puzzle to transform in json file
    try:
        data_dict[PUZZLE] = json.loads(data_dict[PUZZLE])
    except:
        message = "App was not able to upload json with puzzle's info."
        logger.critical(message,exc_info=True)
        return 0


    #clean dates
    data_dict[TODAY] = "".join([l for l in data_dict[TODAY] if l != "\\" and l != "\'"])
    data_dict[YESTERDAY] = "".join([l for l in data_dict[YESTERDAY] if l != "\\" and l != "\'"])
    message = "Cleaned the date constants. Current day is: {0}. Yesteday's date: {1}".format(data_dict[TODAY],data_dict[YESTERDAY])
    logger.info(message)

    logger.info("Successfully obtained Puzzle's Info")

    return data_dict

def day_setup(data):
    """ call js_parse function of this module to get json-formatted data.
    Sift through json to retrieve the day's necessary info"""
    try:
        board = data[PUZZLE]["puzzles"][data[TODAY]]["board"]
    except:
        message = "Unable to obtain today's board"
        logger.critical(message)
        return 0,0
    try:       
        bonus_word = data[PUZZLE]["puzzles"][data[TODAY]]["wordOfTheDay"]["term"]
    except:
        message = "Unable to obtain today's bonus word"
        logger.critical(message)
        return 0,0
    
    size = [len(i)==len(board) for i in board]

    if all(size):
        message = "Today's board is of shape ({0},{1}) and bonus word is {2}".format(len(board),len(board[0]),bonus_word)
        logger.info(message)
    else:
        message = "Board is not a square. Shape is ({0},{1}).".format(len(board),max([len(i) for i in board]))
        logger.warning(message)

    return board,bonus_word

def previous_day(data):
    """ Call js_parse function of this module to get json-formatted data.
    Sift through json to retrieve yesterday's necessary info"""
    try:
        board = data[PUZZLE]["puzzles"][data[YESTERDAY]]["board"]
    except:
        message = "Unable to obtain yesterday's board"
        logger.error(message)
        return 0,0,0
    try:
        bonus_word = data[PUZZLE]["puzzles"][data[YESTERDAY]]["wordOfTheDay"]["term"]
    except:
        message = "Unable to obtain yesterday's bonus word"
        logger.error(message)
        return 0,0,0
    try:    
        words = data[PREVIOUS_DAY_WORDS]
    except:
        message = "Unable to obtain yesterday's solutions"
        logger.error(message)
        return 0,0,0
    message_1 = "Yesterday's board was of shape ({0},{1}) and bonus word was {2}".format(len(board),max([len(i) for i in board]),bonus_word)
    message_2 = "There are {0} words for yesterday's squaredle puzzle.".format(len(words))
    logger.info(message_1)
    logger.info(message_2)
    return board,bonus_word,words

if __name__ == "__main__":
    logger.new_stream()
    jsdata = js_parser()

    t_board,t_bonus = day_setup(jsdata)
    y_board,y_bonus,y_words = previous_day(jsdata)